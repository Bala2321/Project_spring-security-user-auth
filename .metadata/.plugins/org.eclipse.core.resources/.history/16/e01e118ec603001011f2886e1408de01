package com.project.security;

import java.util.List;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;
import org.springframework.security.web.csrf.CsrfTokenRepository;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;


@Configuration
@EnableWebSecurity
public class springSecurityConfiguration {

//	 @Bean
//	    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//	        http
//	            .cors(cors -> cors.configurationSource(corsConfigurationSource())) // Enable CORS
////	            .csrf(csrf -> csrf
////	                .csrfTokenRepository(csrfTokenRepository()) // Enable CSRF
////	                .ignoringRequestMatchers("/public/**")  // Allow CSRF for public APIs
////	            )
//	            .csrf(csrf -> csrf.disable()) // âœ… Fully disables CSRF for all APIs
//	            .authorizeHttpRequests(auth -> auth
//	            	    .requestMatchers("/public/**").permitAll() // Allow public APIs
//	            	    .requestMatchers(org.springframework.http.HttpMethod.OPTIONS, "/**").permitAll() // Allow CORS preflight
//	            	    .anyRequest().authenticated()
//	            	)
//	            
//	            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
//	        // ðŸ”¹ Explicitly disable security features that might block requests
//	        http.headers(headers -> headers.frameOptions(frameOptions -> frameOptions.disable()));
//	        http.securityMatcher("/**");// âœ… Ensure Spring Security applies to all endpoints
//
//	        return http.build();
//	    }
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	    http
	        .cors(cors -> cors.configurationSource(corsConfigurationSource())) // Enable CORS
	        .csrf(csrf -> csrf.disable()) // Disable CSRF (if not needed)
	        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // Prevent sessions
	        .securityContext(securityContext -> securityContext.requireExplicitSave(false)) // Ensure security context is not stored in sessions
	        .authorizeHttpRequests(auth -> auth
	            .requestMatchers("/public/**").permitAll() // Allow public APIs
	            .requestMatchers(org.springframework.http.HttpMethod.OPTIONS, "/**").permitAll() // Allow CORS preflight
	            .anyRequest().authenticated()
	        )
	        .logout(logout -> logout.invalidateHttpSession(true).deleteCookies("JSESSIONID")); // Delete session cookies

	    return http.build();
	}

//	    // âœ… CSRF Token Repository: Stores token in a cookie
//	    @Bean
//	    public CsrfTokenRepository csrfTokenRepository() {
//	        return CookieCsrfTokenRepository.withHttpOnlyFalse(); // CSRF token in cookie
//	    }

	    // âœ… CORS Configuration
	    @Bean
	    public CorsConfigurationSource corsConfigurationSource() {
	        CorsConfiguration config = new CorsConfiguration();
	        config.setAllowedOrigins(List.of("*")); // Allow all origins
	        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
	        config.setAllowedHeaders(List.of("*"));
	        
	        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
	        source.registerCorsConfiguration("/**", config);
	        return source;
	    }
	    @Bean
	    public CorsFilter corsFilter() {
	        return new CorsFilter(corsConfigurationSource());
	    }
	}