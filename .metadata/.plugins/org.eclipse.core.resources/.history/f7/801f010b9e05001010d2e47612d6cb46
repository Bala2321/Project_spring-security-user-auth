package com.project.pojo;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class RegisterUserDetails {

    /**
     * Username validation:
     * - Must not be blank or empty
     * - Must be between 3 and 50 characters
     */
    @NotBlank(message = "Username is required") // Ensures the username is not null, empty, or only spaces
    @NotEmpty(message = "Username cannot be empty") // Ensures the username is not empty
    @Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters") // Limits username length
    private String userName;

    /**
     * Email validation:
     * - Must not be blank
     * - Must be a valid email format
     */
    @NotBlank(message = "Email is required") // Ensures the email is not null, empty, or only spaces
    @Email(message = "Invalid email format") // Validates email pattern (e.g., example@domain.com)
    private String email;

    /**
     * Password validation:
     * - Must not be blank
     * - Must be at least 6 characters long
     * - Must contain at least one uppercase letter, one lowercase letter, one digit, and one special character
     */
    @NotBlank(message = "Password is required") // Ensures password is not null, empty, or only spaces
    @Size(min = 6, message = "Password must be at least 6 characters long") // Enforces minimum password length
    @Pattern(
        regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$",
        message = "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character"
    ) // Ensures password complexity
    private String password;

    /**
     * Confirm Password validation:
     * - Must not be blank
     * - Must match the password
     */
    @NotBlank(message = "Confirm Password is required") // Ensures confirmPassword is not null, empty, or only spaces
    private String confirmPassword;

    // Getter and Setter for Username
    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    // Getter and Setter for Email
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // Getter and Setter for Password
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // Getter and Setter for Confirm Password
    public String getConfirmPassword() {
        return confirmPassword;
    }

    public void setConfirmPassword(String confirmPassword) {
        this.confirmPassword = confirmPassword;
    }

    // Overriding toString() for debugging
    @Override
    public String toString() {
        return "RegisterUserDetails [userName=" + userName + ", email=" + email + ", password=" + password
                + ", confirmPassword=" + confirmPassword + "]";
    }

    /**
     * Custom method to check if password and confirm password match.
     * @return true if passwords match, otherwise false.
     */
    public boolean isPasswordMatching() {
        return password != null && password.equals(confirmPassword);
    }
}
