package com.project.exceptionHandler;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.project.pojo.OutputResponse;

@RestControllerAdvice
public class GlobalExceptionHandler {
	
	@ExceptionHandler(MethodArgumentNotValidException.class)
	
	 public ResponseEntity<OutputResponse> handleValidationErrors(MethodArgumentNotValidException ex) {
		OutputResponse outputResponse = new OutputResponse();

		 Map<String, String> errors = new HashMap<>();
        // Extract field errors and put them into a map
        ex.getBindingResult().getFieldErrors().forEach(error ->
            errors.put(error.getField(), error.getDefaultMessage())
        );

        
        outputResponse.setStatus("fail");
        outputResponse.setOutput(errors);

        // Return structured response
        return ResponseEntity.badRequest().body(outputResponse);
    }
	
	
	 // Handle HTTP request method not supported exception
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    public ResponseEntity<OutputResponse> handleMethodNotSupported(HttpRequestMethodNotSupportedException ex) {
        OutputResponse outputResponse = new OutputResponse();
        outputResponse.setStatus("fail");
        outputResponse.setOutput("Request method '" + ex.getMethod() + "' is not supported. Please check the API documentation.");

        return ResponseEntity.status(HttpStatus.METHOD_NOT_ALLOWED).body(outputResponse);
    }
	
    // Handle validation errors (400 Bad Request)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<OutputResponse> handleValidationErrors(MethodArgumentNotValidException ex) {
        OutputResponse outputResponse = new OutputResponse();

        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getFieldErrors().forEach(error -> 
            errors.put(error.getField(), error.getDefaultMessage())
        );

        outputResponse.setStatus("fail");
        outputResponse.setOutput(errors);

        return ResponseEntity.badRequest().body(outputResponse);
    }

    // Handle unsupported HTTP methods (405 Method Not Allowed)
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    public ResponseEntity<OutputResponse> handleMethodNotSupported(HttpRequestMethodNotSupportedException ex) {
        OutputResponse outputResponse = new OutputResponse();
        outputResponse.setStatus("fail");
        outputResponse.setMessage(PublicConstants.METHOD_NOT_SUPPORTED);
        return ResponseEntity.status(HttpStatus.METHOD_NOT_ALLOWED).body(outputResponse);
    }

    // Handle generic exceptions (500 Internal Server Error)
    @ExceptionHandler(Exception.class)
    public ResponseEntity<OutputResponse> handleGeneralException(Exception ex) {
        OutputResponse outputResponse = new OutputResponse();
        outputResponse.setStatus("error");
        outputResponse.setMessage(PublicConstants.INTERNAL_SERVER_ERROR);
        
        // Log the exception for debugging
        ex.printStackTrace(); 

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(outputResponse);
    }

    // Handle specific business logic exceptions
    @ExceptionHandler(ResponseStatusException.class)
    public ResponseEntity<OutputResponse> handleResponseStatusException(ResponseStatusException ex) {
        OutputResponse outputResponse = new OutputResponse();
        outputResponse.setStatus("fail");
        outputResponse.setMessage(ex.getReason());
        return ResponseEntity.status(ex.getStatusCode()).body(outputResponse);
    }


}
