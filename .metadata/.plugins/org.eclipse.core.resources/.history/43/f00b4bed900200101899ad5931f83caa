package com.project.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SpringSecurityConfiguration {

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())  // ðŸ”´ Fully disable CSRF for REST APIs (Safe for JWT-based APIs)
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/public/**").permitAll()  // âœ… Allow all CRUD operations for public APIs
                .requestMatchers("/secure/**").authenticated()  // ðŸ”’ Require authentication for secure APIs
                .anyRequest().authenticated()  // Secure all other endpoints
            )
            .sessionManagement(session -> session.sessionCreationPolicy(
                org.springframework.security.config.http.SessionCreationPolicy.STATELESS)) // ðŸ”’ Enforce stateless sessions (Best for APIs)
            .formLogin(form -> form.disable())  // ðŸš« No login form
            .httpBasic(httpBasic -> httpBasic.disable());  // ðŸš« No Basic Authentication

        return http.build();
    }
}
